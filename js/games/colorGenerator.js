import { modalStyles } from '../styles/modalStyles.js';
import { logger } from '../utils/logger.js';

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
 * 
 * –ò–≥—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞.
 * –ü—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
 * –≤ –≤–∏–¥–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ –µ–≥–æ HEX-–∫–æ–¥–∞. –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ —Ü–∏—Ç–∞—Ç—ã
 * –æ —Ü–≤–µ—Ç–∞—Ö.
 */
function startColorGeneratorGame() {
    logger.info('Starting Color Generator Game');
    let score = 0;
    
    const colorCompliments = [
        '–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–æ–∑–¥–∞–µ—à—å –Ω–∞—Å—Ç–æ—è—â—É—é —Ä–∞–¥—É–≥—É! ‚ù§Ô∏è',
        '–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! –¢–≤–æ–∏ —Ü–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞—é—Ç! üé®',
        '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫! üñåÔ∏è',
        '–ë—Ä–∞–≤–æ! –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Ü–≤–µ—Ç –∫–∞–∫ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π! üéØ',
        '–°—É–ø–µ—Ä! –¢–≤–æ–∏ —Ü–≤–µ—Ç–∞ –∏–∑–ª—É—á–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤! ‚ú®',
        '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã —Å–æ–∑–¥–∞–µ—à—å —à–µ–¥–µ–≤—Ä—ã! üé≠',
        '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢–≤–æ–∏ —Ü–≤–µ—Ç–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç! üí´',
        '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–ª–æ—Ä–∏—Å—Ç! üé™',
        '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏! –¢–≤–æ–∏ —Ü–≤–µ—Ç–∞ –æ–∂–∏–≤–∞—é—Ç! üåü',
        '–£–º–Ω–∏—Ü–∞! –¢—ã —Å–æ–∑–¥–∞–µ—à—å –º–∞–≥–∏—é —Ü–≤–µ—Ç–∞! üé™'
    ];

    const colorQuotes = [
        '–¶–≤–µ—Ç - —ç—Ç–æ —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—É—à—É. - –í–∞—Å–∏–ª–∏–π –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π üé®',
        '–¶–≤–µ—Ç–∞ - —ç—Ç–æ —É–ª—ã–±–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã. - –õ–∏ –•–∞–Ω—Ç ‚ù§Ô∏è',
        '–ñ–∏–∑–Ω—å - —ç—Ç–æ —Ö–æ–ª—Å—Ç, –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –≤—Å–µ –∫—Ä–∞—Å–∫–∏, –∫–∞–∫–∏–µ –º–æ–∂–µ—à—å. - –î—ç–Ω–Ω–∏ –ö—ç–π üñåÔ∏è',
        '–¶–≤–µ—Ç - —ç—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –≥–ª–∞–∑–∞ - –º–æ–ª–æ—Ç–æ—á–∫–∏, –¥—É—à–∞ - –º–Ω–æ–≥–æ—Å—Ç—Ä—É–Ω–Ω—ã–π —Ä–æ—è–ª—å. - –í–∞—Å–∏–ª–∏–π –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π üéπ',
        '–¶–≤–µ—Ç–∞ - —ç—Ç–æ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤–∏–¥–∏–º. - –ú–∞—Ä–∫ –®–∞–≥–∞–ª üé≠',
        '–ö–∞–∂–¥—ã–π —Ü–≤–µ—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. - –ü–∞–±–ª–æ –ü–∏–∫–∞—Å—Å–æ üìö',
        '–¶–≤–µ—Ç–∞ - —ç—Ç–æ —è–∑—ã–∫ –¥—É—à–∏. - –í–∏–Ω—Å–µ–Ω—Ç –í–∞–Ω –ì–æ–≥ üé®',
        '–ñ–∏–∑–Ω—å –ø–æ–¥–æ–±–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–µ: –Ω–∞—Ä–∏—Å—É–π –µ—ë —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏! - –î–∞–ª–∏–ª–∞ üåü',
        '–¶–≤–µ—Ç–∞ - —ç—Ç–æ —É–ª—ã–±–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã. - –õ–∏ –•–∞–Ω—Ç ‚ù§Ô∏è',
        '–ö–∞–∂–¥—ã–π —Ü–≤–µ—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é –º—É–∑—ã–∫—É. - –ö–ª–æ–¥ –ú–æ–Ω–µ üéµ'
    ];

    const specialColors = {
        '–ù–µ–±–µ—Å–Ω–∞—è –ª–∞–∑—É—Ä—å': '#87CEEB',
        '–ú–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞': '#20B2AA',
        '–õ–∞–≤–∞–Ω–¥–æ–≤—ã–π': '#E6E6FA',
        '–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π': '#FFDAB9',
        '–ú—è—Ç–Ω—ã–π': '#98FF98',
        '–ö–æ—Ä–∞–ª–ª–æ–≤—ã–π': '#FF7F50',
        '–ë–∏—Ä—é–∑–æ–≤—ã–π': '#40E0D0',
        '–ê–º–µ—Ç–∏—Å—Ç–æ–≤—ã–π': '#9966CC',
        '–û–ª–∏–≤–∫–æ–≤—ã–π': '#808000',
        '–ò–Ω–¥–∏–≥–æ': '#4B0082',
        '–ü—É—Ä–ø—É—Ä–Ω—ã–π': '#800080',
        '–ë–æ—Ä–¥–æ–≤—ã–π': '#800000',
        '–¢–µ—Ä—Ä–∞–∫–æ—Ç–æ–≤—ã–π': '#E2725B',
        '–ë–∏—Ä—é–∑–æ–≤—ã–π': '#30D5C8',
        '–õ–∏–º–æ–Ω–Ω—ã–π': '#FDFF00',
        '–ú–∞–ª–∏–Ω–æ–≤—ã–π': '#DC143C',
        '–°–ª–∏–≤–æ–≤—ã–π': '#8E4585',
        '–ú–µ–¥–Ω—ã–π': '#B87333',
        '–ë—Ä–æ–Ω–∑–æ–≤—ã–π': '#CD7F32',
        '–ü–µ—Å–æ—á–Ω—ã–π': '#F4A460'
    };
    
    try {
        const modal = document.createElement('div');
        Object.assign(modal.style, modalStyles.modal);

        const gameContent = document.createElement('div');
        Object.assign(gameContent.style, modalStyles.modalContent);

        const title = document.createElement('h2');
        Object.assign(title.style, modalStyles.modalTitle);
        title.textContent = '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤';

        const colorDisplay = document.createElement('div');
        Object.assign(colorDisplay.style, {
            width: '200px',
            height: '200px',
            margin: '30px auto',
            borderRadius: '24px',
            background: '#202027',
            transition: 'background-color 0.3s ease',
            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)'
        });

        const colorCode = document.createElement('p');
        Object.assign(colorCode.style, {
            color: '#202027',
            fontFamily: 'Montserrat',
            fontSize: '24px',
            fontWeight: '600',
            margin: '20px 0'
        });
        colorCode.textContent = '#202027';

        const message = document.createElement('p');
        Object.assign(message.style, {
            margin: '20px 0',
            fontFamily: 'Montserrat',
            fontSize: '24px',
            fontWeight: '500',
            minHeight: '24px',
            lineHeight: '1.4'
        });

        const generateButton = document.createElement('button');
        Object.assign(generateButton.style, modalStyles.modalButton);
        generateButton.textContent = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç';

        const closeButton = document.createElement('button');
        Object.assign(closeButton.style, modalStyles.modalButton);
        closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';

        function generateRandomColor() {
            try {
                if (Math.random() < 0.3) {
                    const specialColorNames = Object.keys(specialColors);
                    const randomColorName = specialColorNames[Math.floor(Math.random() * specialColorNames.length)];
                    const colorValue = specialColors[randomColorName];
                    logger.info(`Generated special color: ${randomColorName} (${colorValue})`);
                    return { value: colorValue, name: randomColorName };
                }

                const letters = '0123456789ABCDEF';
                let color = '#';
                for (let i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                logger.info(`Generated random color: ${color}`);
                return { value: color, name: null };
            } catch (error) {
                logger.error('Error generating color:', error);
                throw error;
            }
        }

        generateButton.addEventListener('mouseover', () => {
            Object.assign(generateButton.style, modalStyles.modalButtonHover);
        });

        generateButton.addEventListener('mouseout', () => {
            Object.assign(generateButton.style, modalStyles.modalButton);
        });

        generateButton.addEventListener('click', () => {
            try {
                const newColor = generateRandomColor();
                colorDisplay.style.backgroundColor = newColor.value;
                colorCode.textContent = newColor.name ? `${newColor.name} (${newColor.value})` : newColor.value;
                score++;

                if (score % 2 === 0) {
                    const randomQuote = colorQuotes[Math.floor(Math.random() * colorQuotes.length)];
                    message.innerHTML = randomQuote;
                    logger.info('Displayed color quote');
                } else {
                    const randomCompliment = colorCompliments[Math.floor(Math.random() * colorCompliments.length)];
                    message.textContent = randomCompliment;
                    logger.info('Displayed color compliment');
                }
                message.style.color = '#202027';
            } catch (error) {
                logger.error('Error handling color generation:', error);
                message.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞';
                message.style.color = '#ff0000';
            }
        });

        closeButton.addEventListener('mouseover', () => {
            Object.assign(closeButton.style, modalStyles.modalButtonHover);
        });

        closeButton.addEventListener('mouseout', () => {
            Object.assign(closeButton.style, modalStyles.modalButton);
        });

        closeButton.addEventListener('click', () => {
            logger.info('Closing Color Generator Game');
            document.body.removeChild(modal);
        });

        gameContent.appendChild(title);
        gameContent.appendChild(colorDisplay);
        gameContent.appendChild(colorCode);
        gameContent.appendChild(message);
        gameContent.appendChild(generateButton);
        gameContent.appendChild(closeButton);
        modal.appendChild(gameContent);
        document.body.appendChild(modal);

        logger.info('Color Generator Game initialized successfully');
    } catch (error) {
        logger.error('Error initializing Color Generator Game:', error);
        throw error;
    }
}

export { startColorGeneratorGame };
