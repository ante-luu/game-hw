import modalStyles from '../styles/modalStyles.js';
import logger from '../utils/logger.js';
import gameElementStyles from '../styles/gameElementStyles.js';

/**
 * –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
 * 
 * –ü—Ä–∞–≤–∏–ª–∞:
 * - –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞
 * - –ö–æ–º–ø—å—é—Ç–µ—Ä –¥–µ–ª–∞–µ—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
 * - –ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, –Ω–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É, –±—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å
 * - –ü—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –≤—ã–±–æ—Ä–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è
 * - –í–µ–¥–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –ø–æ–±–µ–¥, –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∏—á—å–∏—Ö
 * 
 * @returns {void}
 */
export function startRockPaperScissorsGame() {
    logger.info('Starting Rock Paper Scissors Game');
    
    let playerScore = 0;
    let computerScore = 0;
    let draws = 0;
    let totalGames = 0;
    
    const choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const emojis = {
        '–∫–∞–º–µ–Ω—å': 'üóø',
        '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è',
        '–±—É–º–∞–≥–∞': 'üìú'
    };
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.style.cssText = modalStyles.modal;

    const gameContent = document.createElement('div');
    gameContent.style.cssText = modalStyles.modalContent;
    gameContent.style.maxWidth = '600px';
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.innerWidth <= 768) {
        gameContent.style.width = '100vw';
        gameContent.style.maxWidth = '100vw';
        gameContent.style.padding = '16px 0 16px 0';
        gameContent.style.borderRadius = '0';
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const title = document.createElement('h2');
    title.style.cssText = modalStyles.title;
    title.textContent = '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞';

    function showRound() {
        // –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        let description = gameContent.querySelector('.rps-description');
        if (!description) {
            description = document.createElement('div');
            description.className = 'rps-description';
            description.style.cssText = 'margin-bottom: 15px; color: #202027; font-size: 16px;';
            gameContent.insertBefore(description, title.nextSibling);
        }
        description.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–±–µ–¥–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä!';
    }

    const statsContainer = document.createElement('div');
    statsContainer.style.cssText = gameElementStyles.statsContainer;

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {HTMLElement} –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    const createStatBox = (label, value) => {
        const box = document.createElement('div');
        box.style.cssText = gameElementStyles.statBox;
        const labelEl = document.createElement('div');
        labelEl.textContent = label;
        labelEl.style.cssText = gameElementStyles.statLabel;
        const valueEl = document.createElement('div');
        valueEl.textContent = value;
        valueEl.style.cssText = gameElementStyles.statValue;
        box.appendChild(labelEl);
        box.appendChild(valueEl);
        return box;
    };

    const playerScoreBox = createStatBox('–¢–≤–æ–∏ –ø–æ–±–µ–¥—ã', '0');
    const computerScoreBox = createStatBox('–ü–æ–±–µ–¥—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞', '0');
    const drawsBox = createStatBox('–ù–∏—á—å–∏', '0');

    statsContainer.appendChild(playerScoreBox);
    statsContainer.appendChild(computerScoreBox);
    statsContainer.appendChild(drawsBox);

    const resultDisplay = document.createElement('div');
    resultDisplay.style.cssText = gameElementStyles.resultDisplay;
    resultDisplay.style.textAlign = 'center';

    const messageDisplay = document.createElement('div');
    messageDisplay.style.cssText = gameElementStyles.messageDisplay;

    const buttonsContainer = document.createElement('div');
    buttonsContainer.style.cssText = gameElementStyles.buttonsContainer;

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
     * @param {string} playerChoice - –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
     * @param {string} computerChoice - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
     * @returns {string} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
     */
    function determineWinner(playerChoice, computerChoice) {
        if (playerChoice === computerChoice) {
            return '–ù–∏—á—å—è!';
        }
        
        if (
            (playerChoice === '–∫–∞–º–µ–Ω—å' && computerChoice === '–Ω–æ–∂–Ω–∏—Ü—ã') ||
            (playerChoice === '–Ω–æ–∂–Ω–∏—Ü—ã' && computerChoice === '–±—É–º–∞–≥–∞') ||
            (playerChoice === '–±—É–º–∞–≥–∞' && computerChoice === '–∫–∞–º–µ–Ω—å')
        ) {
            return '–¢—ã –ø–æ–±–µ–¥–∏–ª!';
        }
        
        return '–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª!';
    }

    function isMobile() {
        return window.innerWidth <= 768;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
     * @param {string} choice - –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
     */
    function handlePlayerChoice(choice) {
        logger.info('Player made a choice', { choice });
        try {
            const computerChoice = choices[Math.floor(Math.random() * 3)];
            logger.info('Computer made a choice', { computerChoice });
            const result = determineWinner(choice, computerChoice);
            totalGames++;
            if (result === '–ù–∏—á—å—è!') {
                draws++;
                drawsBox.lastChild.textContent = draws;
            } else if (result === '–¢—ã –ø–æ–±–µ–¥–∏–ª!') {
                playerScore++;
                playerScoreBox.lastChild.textContent = playerScore;
            } else {
                computerScore++;
                computerScoreBox.lastChild.textContent = computerScore;
            }
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const emojiFontSize = isMobile() ? '1.5em' : '2.2em';
            const emojiGap = isMobile() ? '2px' : '10px';
            const resultFontSize = isMobile() ? '0.9em' : '1.1em';
            resultDisplay.innerHTML = `
              <div style="display: flex; align-items: center; justify-content: center; font-size: ${emojiFontSize}; gap: ${emojiGap}; margin-bottom: 2px;">
                <span>${emojis[choice]}</span>
                <span>${emojis[computerChoice]}</span>
              </div>
              <div style="text-align: center; font-size: ${resultFontSize}; margin: 0;">${result}</div>
            `;
            const category = '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞';
            let message;
            if (result === '–¢—ã –ø–æ–±–µ–¥–∏–ª!') {
                const encouragements = window.gameMessages.encouragements && window.gameMessages.encouragements[category];
                message = encouragements && encouragements.length
                    ? encouragements[Math.floor(Math.random() * encouragements.length)]
                    : window.gameMessages.compliments[Math.floor(Math.random() * window.gameMessages.compliments.length)];
            } else if (result === '–ù–∏—á—å—è!') {
                message = '–ù–∏—á—å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§ù';
            } else {
                message = window.gameMessages.motivation[Math.floor(Math.random() * window.gameMessages.motivation.length)];
            }
            messageDisplay.textContent = message;
            logger.info('Round result', { result, message });
        } catch (error) {
            logger.error('Error handling player choice', error);
            messageDisplay.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!';
        }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    const smallButtonStyleDesktop = modalStyles.button +
      'width: 80px; min-width: 0; padding: 6px 0; font-size: 15px; margin: 0; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.08); flex-shrink: 1; transition: background 0.2s, color 0.2s;';

    const smallButtonStyleMobile = modalStyles.button +
      'width: 28vw; min-width: 0; max-width: 32vw; padding: 3px 0; font-size: 11px; margin: 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.08); flex-shrink: 1; transition: background 0.2s, color 0.2s;';

    const smallButtonStyle = isMobile() ? smallButtonStyleMobile : smallButtonStyleDesktop;

    const buttonRow = document.createElement('div');
    buttonRow.style.display = 'flex';
    buttonRow.style.justifyContent = 'center';
    buttonRow.style.gap = isMobile() ? '6px' : '16px';
    buttonRow.style.margin = '0 auto 12px auto';
    buttonRow.style.maxWidth = '100%';

    buttonsContainer.innerHTML = '';
    choices.forEach((choice) => {
        const button = document.createElement('button');
        button.textContent = `${emojis[choice]} ${choice}`;
        button.style.cssText = smallButtonStyle;
        button.style.background = '#202027';
        button.style.color = 'white';
        button.addEventListener('mouseover', () => {
            button.style.background = '#33d17a';
            button.style.color = '#202027';
        });
        button.addEventListener('mouseout', () => {
            button.style.background = '#202027';
            button.style.color = 'white';
        });
        button.addEventListener('click', () => handlePlayerChoice(choice));
        buttonRow.appendChild(button);
    });
    buttonsContainer.appendChild(buttonRow);

    const closeButton = document.createElement('button');
    closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
    closeButton.style.cssText = modalStyles.button;
    closeButton.addEventListener('mouseover', () => {
        closeButton.style.cssText = modalStyles.button + (modalStyles.buttonHover || '');
    });
    closeButton.addEventListener('mouseout', () => {
        closeButton.style.cssText = modalStyles.button;
    });

    closeButton.addEventListener('click', () => {
        logger.info('Closing Rock Paper Scissors Game');
        document.body.removeChild(modal);
    });

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    showRound();
    gameContent.appendChild(title);
    gameContent.appendChild(statsContainer);
    gameContent.appendChild(resultDisplay);
    gameContent.appendChild(messageDisplay);
    gameContent.appendChild(buttonsContainer);
    gameContent.appendChild(closeButton);
    modal.appendChild(gameContent);
    document.body.appendChild(modal);

    logger.info('Rock Paper Scissors Game initialized successfully');
}