import modalStyles from '../styles/modalStyles.js';
import logger from '../utils/logger.js';
import gameElementStyles from '../styles/gameElementStyles.js';

/**
 * –ò–≥—Ä–∞ "–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç"
 * 
 * –ü—Ä–∞–≤–∏–ª–∞:
 * - –ò–≥—Ä–æ–∫—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞
 * - –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 * - –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1 –æ—á–∫–æ
 * - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * 
 * @returns {void}
 */
export function startReverseTextGame() {
    logger.info('Starting Reverse Text Game');
    
    let score = 0;
    let totalQuestions = 0;
    
    // –ú–∞—Å—Å–∏–≤—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–≥—Ä—ã
    const phrases = [
        '–ö–æ—Ç', '–ú–æ—Ä–æ–∑', '–î—É–±', '–°–∫–∞–∑–∫–∞', '–ë–æ–≥–∞—Ç—ã—Ä—å', '–í–µ—Ç–µ—Ä', '–ö–∏—Ç', '–õ–æ–∂—å',
        '–î–æ—Ä–æ–≥–∞', '–õ–µ—Å', '–ö–æ–∑–ª–∏–∫', '–¢—Ä–æ–ø–∞', '–¶–∞—Ä—Å—Ç–≤–æ', '–ì–æ—Ä—ã', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ',
        '–í–æ–ª—à–µ–±—Å—Ç–≤–æ', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ', '–°–æ–∫—Ä–æ–≤–∏—â–µ', '–ó–∞–º–æ–∫', '–†—ã—Ü–∞—Ä—å', '–î—Ä–∞–∫–æ–Ω',
        '–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞', '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ', '–í–æ–ª—à–µ–±–Ω–∏–∫', '–ß–∞—Ä–æ–¥–µ–π', '–¢–∞–π–Ω–∞', '–ó–∞–≥–∞–¥–∫–∞',
        '–°–æ–∫—Ä–æ–≤–∏—â–µ', '–ö–ª–∞–¥–µ–∑—å', '–õ–∞–±–∏—Ä–∏–Ω—Ç', '–ó–≤–µ–∑–¥–æ–ø–∞–¥', '–†–∞–¥—É–≥–∞', '–ú–µ—Ç–µ–æ—Ä–∏—Ç',
        '–ö–æ–º–µ—Ç–∞', '–ì–∞–ª–∞–∫—Ç–∏–∫–∞', '–í—Å–µ–ª–µ–Ω–Ω–∞—è', '–ö–æ—Å–º–æ—Å', '–ü–ª–∞–Ω–µ—Ç–∞', '–°–æ–∑–≤–µ–∑–¥–∏–µ',
        '–ú–ª–µ—á–Ω—ã–π –ø—É—Ç—å', '–ö—Ä–∞—Å–Ω–∞—è —à–∞–ø–æ—á–∫–∞', '–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞', '–ó–æ–ª—É—à–∫–∞', '–†—É—Å–∞–ª–æ—á–∫–∞',
        '–ê–ª–∏—Å–∞', '–ü–∏—Ç–µ—Ä –ü—ç–Ω', '–í–∏–Ω–Ω–∏ –ü—É—Ö', '–ö–∞—Ä–ª—Å–æ–Ω', '–ë—É—Ä–∞—Ç–∏–Ω–æ', '–ß–∏–ø–æ–ª–ª–∏–Ω–æ'
    ];

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.style.cssText = modalStyles.modal;

    const gameContent = document.createElement('div');
    gameContent.style.cssText = modalStyles.modalContent;

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const title = document.createElement('h2');
    title.style.cssText = modalStyles.title;
    title.textContent = '–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç';

    function showQuestion() {
        // –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        let description = gameContent.querySelector('.reverse-description');
        if (!description) {
            description = document.createElement('div');
            description.className = 'reverse-description';
            description.style.cssText = 'margin-bottom: 15px; color: #202027; font-size: 16px;';
            gameContent.insertBefore(description, title.nextSibling);
        }
        description.textContent = '–í—ã –≤–∏–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å, –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å!';

        const scoreDisplay = document.createElement('p');
        scoreDisplay.style.cssText = gameElementStyles.score;
        scoreDisplay.textContent = '–°—á—ë—Ç: 0/0';

        const questionDisplay = document.createElement('p');
        questionDisplay.style.cssText = gameElementStyles.question;
        questionDisplay.textContent = '';

        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç';
        input.style.cssText = modalStyles.input;

        const message = document.createElement('p');
        message.style.cssText = gameElementStyles.message;

        const button = document.createElement('button');
        button.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
        button.style.cssText = modalStyles.button;
        button.addEventListener('mouseover', () => {
            button.style.cssText = modalStyles.button + (modalStyles.buttonHover || '');
        });
        button.addEventListener('mouseout', () => {
            button.style.cssText = modalStyles.button;
        });

        const closeButton = document.createElement('button');
        closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
        closeButton.style.cssText = modalStyles.button;
        closeButton.addEventListener('mouseover', () => {
            closeButton.style.cssText = modalStyles.button + (modalStyles.buttonHover || '');
        });
        closeButton.addEventListener('mouseout', () => {
            closeButton.style.cssText = modalStyles.button;
        });

        /**
         * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
         * @returns {string} –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–ª–æ–≤–æ
         */
        function generateQuestion() {
            logger.info('Generating new text to reverse');
            
            try {
                const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
                questionDisplay.textContent = randomPhrase;
                const reversed = randomPhrase.split('').reverse().join('');
                logger.info(`Generated phrase: "${randomPhrase}", reversed: "${reversed}"`);
                return reversed;
            } catch (error) {
                logger.error('Error generating question', error);
                throw error;
            }
        }

        let currentAnswer = generateQuestion();

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         */
        function checkAnswer() {
            logger.info('Checking user answer');
            
            const userAnswer = input.value.trim();
            totalQuestions++;

            try {
                if (!userAnswer) {
                    message.innerHTML = `
                        <div style="color: #202027;">
                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç
                        </div>
                    `;
                    message.style.background = '#f5f5f5';
                    logger.warning('User entered empty input');
                    return;
                }

                const category = '–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç';
                if (userAnswer.toLowerCase() === currentAnswer.toLowerCase()) {
                    score++;
                    const encouragements = window.gameMessages.encouragements && window.gameMessages.encouragements[category];
                    const randomEncouragement = encouragements && encouragements.length
                        ? encouragements[Math.floor(Math.random() * encouragements.length)]
                        : window.gameMessages.compliments[Math.floor(Math.random() * window.gameMessages.compliments.length)];
                    const categoryQuotes = window.gameMessages.quotesByCategory && window.gameMessages.quotesByCategory[category];
                    const randomQuote = categoryQuotes && categoryQuotes.length
                        ? categoryQuotes[Math.floor(Math.random() * categoryQuotes.length)]
                        : window.gameMessages.quotes[Math.floor(Math.random() * window.gameMessages.quotes.length)];
                    message.innerHTML = `
                        <div style="margin-bottom: 15px; color: #33d17a; font-weight: bold;">–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ</div>
                        <div style="margin-bottom: 10px; color: #202027;">${randomEncouragement}</div>
                        <div style="font-style: italic; color: #666; border-left: 3px solid #202027; padding-left: 15px; margin-top: 10px;">${randomQuote}</div>
                    `;
                    message.style.background = '#e8f5e9';
                    logger.info('Correct answer', { userAnswer, correctAnswer: currentAnswer });
                } else {
                    const randomMotivation = window.gameMessages.motivation[Math.floor(Math.random() * window.gameMessages.motivation.length)];
                    message.innerHTML = `
                        <div style="margin-bottom: 15px; color: #ff4444; font-weight: bold;">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentAnswer}</div>
                        <div style="font-style: italic; color: #666; border-left: 3px solid #202027; padding-left: 15px; margin-top: 10px;">${randomMotivation}</div>
                    `;
                    message.style.background = '#f5f5f5';
                    logger.info('Incorrect answer', { userAnswer, correctAnswer: currentAnswer });
                }

                scoreDisplay.textContent = `–°—á—ë—Ç: ${score}/${totalQuestions}`;
                input.value = '';
                currentAnswer = generateQuestion();
            } catch (error) {
                logger.error('Error checking answer', error);
                message.innerHTML = `
                    <div style="color: #ff4444;">
                        –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
                    </div>
                `;
                message.style.background = '#ffebee';
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        button.addEventListener('click', checkAnswer);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                checkAnswer();
            }
        });

        closeButton.addEventListener('click', () => {
            logger.info('Closing Reverse Text Game');
            document.body.removeChild(modal);
        });

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        gameContent.appendChild(title);
        gameContent.appendChild(description);
        gameContent.appendChild(scoreDisplay);
        gameContent.appendChild(questionDisplay);
        gameContent.appendChild(input);
        gameContent.appendChild(message);
        gameContent.appendChild(button);
        gameContent.appendChild(closeButton);
        modal.appendChild(gameContent);
        document.body.appendChild(modal);

        input.focus();
        logger.info('Reverse Text Game initialized successfully');
    }

    showQuestion();
}

window.startReverseTextGame = startReverseTextGame;
